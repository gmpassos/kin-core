// Automatically generated by xdrgen 
// DO NOT EDIT or your changes may be overwritten
package org.kin.stellarfork.xdr

import java.io.IOException

// === xdr source ============================================================
//  struct OfferEntry
//  {
//      AccountID sellerID;
//      uint64 offerID;
//      Asset selling; // A
//      Asset buying;  // B
//      int64 amount;  // amount of A
//
//      /* price for this offer:
//          price of A in terms of B
//          price=AmountB/AmountA=priceNumerator/priceDenominator
//          price is after fees
//      */
//      Price price;
//      uint32 flags; // see OfferEntryFlags
//
//      // reserved for future use
//      union switch (int v)
//      {
//      case 0:
//          void;
//      }
//      ext;
//  };
//  ===========================================================================
class OfferEntry {
    var sellerID: AccountID? = null
    var offerID: Uint64? = null
    var selling: Asset? = null
    var buying: Asset? = null
    var amount: Int64? = null
    var price: Price? = null
    var flags: Uint32? = null
    var ext: OfferEntryExt? = null

    class OfferEntryExt {
        var discriminant: Int? = null

        companion object {
            @JvmStatic
            @Throws(IOException::class)
            fun encode(
                stream: XdrDataOutputStream,
                encodedOfferEntryExt: OfferEntryExt?
            ) {
                stream.writeInt(encodedOfferEntryExt!!.discriminant!!.toInt())
                when (encodedOfferEntryExt.discriminant) {
                    0 -> {
                    }
                }
            }

            @JvmStatic
            @Throws(IOException::class)
            fun decode(stream: XdrDataInputStream): OfferEntryExt {
                val decodedOfferEntryExt = OfferEntryExt()
                val discriminant = stream.readInt()
                decodedOfferEntryExt.discriminant = discriminant
                when (decodedOfferEntryExt.discriminant) {
                    0 -> {
                    }
                }
                return decodedOfferEntryExt
            }
        }
    }

    companion object {
        @JvmStatic
        @Throws(IOException::class)
        fun encode(stream: XdrDataOutputStream, encodedOfferEntry: OfferEntry) {
            AccountID.encode(stream, encodedOfferEntry.sellerID!!)
            Uint64.encode(stream, encodedOfferEntry.offerID!!)
            Asset.encode(stream, encodedOfferEntry.selling!!)
            Asset.encode(stream, encodedOfferEntry.buying!!)
            Int64.encode(stream, encodedOfferEntry.amount!!)
            Price.encode(stream, encodedOfferEntry.price!!)
            Uint32.encode(stream, encodedOfferEntry.flags!!)
            OfferEntryExt.encode(stream, encodedOfferEntry.ext)
        }

        @JvmStatic
        @Throws(IOException::class)
        fun decode(stream: XdrDataInputStream): OfferEntry {
            val decodedOfferEntry = OfferEntry()
            decodedOfferEntry.sellerID = AccountID.decode(stream)
            decodedOfferEntry.offerID = Uint64.decode(stream)
            decodedOfferEntry.selling = Asset.decode(stream)
            decodedOfferEntry.buying = Asset.decode(stream)
            decodedOfferEntry.amount = Int64.decode(stream)
            decodedOfferEntry.price = Price.decode(stream)
            decodedOfferEntry.flags = Uint32.decode(stream)
            decodedOfferEntry.ext = OfferEntryExt.decode(stream)
            return decodedOfferEntry
        }
    }
}
