// Automatically generated by xdrgen 
// DO NOT EDIT or your changes may be overwritten
package org.kin.stellarfork.xdr

import java.io.IOException

// === xdr source ============================================================
//  union PathPaymentResult switch (PathPaymentResultCode code)
//  {
//  case PATH_PAYMENT_SUCCESS:
//      struct
//      {
//          ClaimOfferAtom offers<>;
//          SimplePaymentResult last;
//      } success;
//  case PATH_PAYMENT_NO_ISSUER:
//      Asset noIssuer; // the asset that caused the error
//  default:
//      void;
//  };
//  ===========================================================================
class PathPaymentResult {
    var discriminant: PathPaymentResultCode? = null
    var success: PathPaymentResultSuccess? = null
    var noIssuer: Asset? = null

    class PathPaymentResultSuccess {
        var offers: Array<ClaimOfferAtom?> = arrayOfNulls(0)
        var last: SimplePaymentResult? = null

        companion object {
            @JvmStatic
            @Throws(IOException::class)
            fun encode(
                stream: XdrDataOutputStream,
                encodedPathPaymentResultSuccess: PathPaymentResultSuccess
            ) {
                val offerssize = encodedPathPaymentResultSuccess.offers.size
                stream.writeInt(offerssize)
                for (i in 0 until offerssize) {
                    ClaimOfferAtom.encode(stream, encodedPathPaymentResultSuccess.offers[i]!!)
                }
                SimplePaymentResult.encode(stream, encodedPathPaymentResultSuccess.last!!)
            }

            @JvmStatic
            @Throws(IOException::class)
            fun decode(stream: XdrDataInputStream): PathPaymentResultSuccess {
                val decodedPathPaymentResultSuccess =
                    PathPaymentResultSuccess()
                val offerssize = stream.readInt()
                decodedPathPaymentResultSuccess.offers = arrayOfNulls(offerssize)
                for (i in 0 until offerssize) {
                    decodedPathPaymentResultSuccess.offers[i] = ClaimOfferAtom.decode(stream)
                }
                decodedPathPaymentResultSuccess.last = SimplePaymentResult.decode(stream)
                return decodedPathPaymentResultSuccess
            }
        }
    }

    companion object {
        @JvmStatic
        @Throws(IOException::class)
        fun encode(
            stream: XdrDataOutputStream,
            encodedPathPaymentResult: PathPaymentResult
        ) {
            stream.writeInt(encodedPathPaymentResult.discriminant!!.value)
            when (encodedPathPaymentResult.discriminant) {
                PathPaymentResultCode.PATH_PAYMENT_SUCCESS -> PathPaymentResultSuccess.encode(
                    stream,
                    encodedPathPaymentResult.success!!
                )
                PathPaymentResultCode.PATH_PAYMENT_NO_ISSUER -> Asset.encode(
                    stream,
                    encodedPathPaymentResult.noIssuer!!
                )
                else -> {
                }
            }
        }

        @JvmStatic
        @Throws(IOException::class)
        fun decode(stream: XdrDataInputStream): PathPaymentResult {
            val decodedPathPaymentResult = PathPaymentResult()
            val discriminant = PathPaymentResultCode.decode(stream)
            decodedPathPaymentResult.discriminant = discriminant
            when (decodedPathPaymentResult.discriminant) {
                PathPaymentResultCode.PATH_PAYMENT_SUCCESS -> decodedPathPaymentResult.success =
                    PathPaymentResultSuccess.decode(stream)
                PathPaymentResultCode.PATH_PAYMENT_NO_ISSUER -> decodedPathPaymentResult.noIssuer =
                    Asset.decode(stream)
                else -> {
                }
            }
            return decodedPathPaymentResult
        }
    }
}
