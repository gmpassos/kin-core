// Automatically generated by xdrgen 
// DO NOT EDIT or your changes may be overwritten
package org.kin.stellarfork.xdr

import java.io.IOException

// === xdr source ============================================================
//  union AuthenticatedMessage switch (uint32 v)
//  {
//  case 0:
//      struct
//  {
//     uint64 sequence;
//     StellarMessage message;
//     HmacSha256Mac mac;
//      } v0;
//  };
//  ===========================================================================
class AuthenticatedMessage {
    var discriminant: Uint32? = null
    var v0: AuthenticatedMessageV0? = null

    class AuthenticatedMessageV0 {
        var sequence: Uint64? = null
        var message: StellarMessage? = null
        var mac: HmacSha256Mac? = null

        companion object {
            @JvmStatic
            @Throws(IOException::class)
            fun encode(
                stream: XdrDataOutputStream,
                encodedAuthenticatedMessageV0: AuthenticatedMessageV0?
            ) {
                Uint64.encode(stream, encodedAuthenticatedMessageV0!!.sequence!!)
                StellarMessage.encode(stream, encodedAuthenticatedMessageV0.message!!)
                HmacSha256Mac.encode(stream, encodedAuthenticatedMessageV0.mac!!)
            }

            @JvmStatic
            @Throws(IOException::class)
            fun decode(stream: XdrDataInputStream): AuthenticatedMessageV0 {
                val decodedAuthenticatedMessageV0 = AuthenticatedMessageV0()
                decodedAuthenticatedMessageV0.sequence = Uint64.decode(stream)
                decodedAuthenticatedMessageV0.message = StellarMessage.decode(stream)
                decodedAuthenticatedMessageV0.mac = HmacSha256Mac.decode(stream)
                return decodedAuthenticatedMessageV0
            }
        }
    }

    companion object {
        @JvmStatic
        @Throws(IOException::class)
        fun encode(
            stream: XdrDataOutputStream,
            encodedAuthenticatedMessage: AuthenticatedMessage
        ) {
            stream.writeInt(encodedAuthenticatedMessage.discriminant!!.uint32!!)
            when (encodedAuthenticatedMessage.discriminant!!.uint32) {
                0 -> AuthenticatedMessageV0.encode(stream, encodedAuthenticatedMessage.v0)
            }
        }

        @JvmStatic
        @Throws(IOException::class)
        fun decode(stream: XdrDataInputStream): AuthenticatedMessage {
            val decodedAuthenticatedMessage = AuthenticatedMessage()
            val discriminant = Uint32.decode(stream)
            decodedAuthenticatedMessage.discriminant = discriminant
            when (decodedAuthenticatedMessage.discriminant!!.uint32) {
                0 -> decodedAuthenticatedMessage.v0 =
                    AuthenticatedMessageV0.decode(stream)
            }
            return decodedAuthenticatedMessage
        }
    }
}
