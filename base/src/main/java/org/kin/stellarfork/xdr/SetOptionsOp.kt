// Automatically generated by xdrgen 
// DO NOT EDIT or your changes may be overwritten
package org.kin.stellarfork.xdr

import org.kin.stellarfork.xdr.AccountID.Companion.encode
import org.kin.stellarfork.xdr.Uint32.Companion.encode
import java.io.IOException

// === xdr source ============================================================
//  struct SetOptionsOp
//  {
//      AccountID* inflationDest; // sets the inflation destination
//
//      uint32* clearFlags; // which flags to clear
//      uint32* setFlags;   // which flags to set
//
//      // account threshold manipulation
//      uint32* masterWeight; // weight of the master account
//      uint32* lowThreshold;
//      uint32* medThreshold;
//      uint32* highThreshold;
//
//      string32* homeDomain; // sets the home domain
//
//      // Add, update or remove a signer for the account
//      // signer is deleted if the weight is 0
//      Signer* signer;
//  };
//  ===========================================================================
class SetOptionsOp {
    var inflationDest: AccountID? = null
    var clearFlags: Uint32? = null
    var setFlags: Uint32? = null
    var masterWeight: Uint32? = null
    var lowThreshold: Uint32? = null
    var medThreshold: Uint32? = null
    var highThreshold: Uint32? = null
    var homeDomain: String32? = null
    var signer: Signer? = null

    companion object {
        @JvmStatic
        @Throws(IOException::class)
        fun encode(stream: XdrDataOutputStream, encodedSetOptionsOp: SetOptionsOp) {
            if (encodedSetOptionsOp.inflationDest != null) {
                stream.writeInt(1)
                encode(stream, encodedSetOptionsOp.inflationDest!!)
            } else {
                stream.writeInt(0)
            }
            if (encodedSetOptionsOp.clearFlags != null) {
                stream.writeInt(1)
                encode(stream, encodedSetOptionsOp.clearFlags!!)
            } else {
                stream.writeInt(0)
            }
            if (encodedSetOptionsOp.setFlags != null) {
                stream.writeInt(1)
                encode(stream, encodedSetOptionsOp.setFlags!!)
            } else {
                stream.writeInt(0)
            }
            if (encodedSetOptionsOp.masterWeight != null) {
                stream.writeInt(1)
                encode(stream, encodedSetOptionsOp.masterWeight!!)
            } else {
                stream.writeInt(0)
            }
            if (encodedSetOptionsOp.lowThreshold != null) {
                stream.writeInt(1)
                encode(stream, encodedSetOptionsOp.lowThreshold!!)
            } else {
                stream.writeInt(0)
            }
            if (encodedSetOptionsOp.medThreshold != null) {
                stream.writeInt(1)
                encode(stream, encodedSetOptionsOp.medThreshold!!)
            } else {
                stream.writeInt(0)
            }
            if (encodedSetOptionsOp.highThreshold != null) {
                stream.writeInt(1)
                encode(stream, encodedSetOptionsOp.highThreshold!!)
            } else {
                stream.writeInt(0)
            }
            if (encodedSetOptionsOp.homeDomain != null) {
                stream.writeInt(1)
                String32.encode(stream, encodedSetOptionsOp.homeDomain!!)
            } else {
                stream.writeInt(0)
            }
            if (encodedSetOptionsOp.signer != null) {
                stream.writeInt(1)
                Signer.encode(stream, encodedSetOptionsOp.signer!!)
            } else {
                stream.writeInt(0)
            }
        }

        @JvmStatic
        @Throws(IOException::class)
        fun decode(stream: XdrDataInputStream): SetOptionsOp {
            val decodedSetOptionsOp = SetOptionsOp()
            val inflationDestPresent = stream.readInt()
            if (inflationDestPresent != 0) {
                decodedSetOptionsOp.inflationDest = AccountID.decode(stream)
            }
            val clearFlagsPresent = stream.readInt()
            if (clearFlagsPresent != 0) {
                decodedSetOptionsOp.clearFlags = Uint32.decode(stream)
            }
            val setFlagsPresent = stream.readInt()
            if (setFlagsPresent != 0) {
                decodedSetOptionsOp.setFlags = Uint32.decode(stream)
            }
            val masterWeightPresent = stream.readInt()
            if (masterWeightPresent != 0) {
                decodedSetOptionsOp.masterWeight = Uint32.decode(stream)
            }
            val lowThresholdPresent = stream.readInt()
            if (lowThresholdPresent != 0) {
                decodedSetOptionsOp.lowThreshold = Uint32.decode(stream)
            }
            val medThresholdPresent = stream.readInt()
            if (medThresholdPresent != 0) {
                decodedSetOptionsOp.medThreshold = Uint32.decode(stream)
            }
            val highThresholdPresent = stream.readInt()
            if (highThresholdPresent != 0) {
                decodedSetOptionsOp.highThreshold = Uint32.decode(stream)
            }
            val homeDomainPresent = stream.readInt()
            if (homeDomainPresent != 0) {
                decodedSetOptionsOp.homeDomain = String32.decode(stream)
            }
            val signerPresent = stream.readInt()
            if (signerPresent != 0) {
                decodedSetOptionsOp.signer = Signer.decode(stream)
            }
            return decodedSetOptionsOp
        }
    }
}
