// Automatically generated by xdrgen 
// DO NOT EDIT or your changes may be overwritten
package org.kin.stellarfork.xdr

import java.io.IOException

// === xdr source ============================================================
//  union LedgerUpgrade switch (LedgerUpgradeType type)
//  {
//  case LEDGER_UPGRADE_VERSION:
//      uint32 newLedgerVersion; // update ledgerVersion
//  case LEDGER_UPGRADE_BASE_FEE:
//      uint32 newBaseFee; // update baseFee
//  case LEDGER_UPGRADE_MAX_TX_SET_SIZE:
//      uint32 newMaxTxSetSize; // update maxTxSetSize
//  };
//  ===========================================================================
class LedgerUpgrade {
    var discriminant: LedgerUpgradeType? = null
    var newLedgerVersion: Uint32? = null
    var newBaseFee: Uint32? = null
    var newMaxTxSetSize: Uint32? = null

    companion object {
        @JvmStatic
        @Throws(IOException::class)
        fun encode(stream: XdrDataOutputStream, encodedLedgerUpgrade: LedgerUpgrade) {
            stream.writeInt(encodedLedgerUpgrade.discriminant!!.value)
            when (encodedLedgerUpgrade.discriminant) {
                LedgerUpgradeType.LEDGER_UPGRADE_VERSION -> Uint32.encode(
                    stream,
                    encodedLedgerUpgrade.newLedgerVersion!!
                )
                LedgerUpgradeType.LEDGER_UPGRADE_BASE_FEE -> Uint32.encode(
                    stream,
                    encodedLedgerUpgrade.newBaseFee!!
                )
                LedgerUpgradeType.LEDGER_UPGRADE_MAX_TX_SET_SIZE -> Uint32.encode(
                    stream,
                    encodedLedgerUpgrade.newMaxTxSetSize!!
                )
            }
        }

        @JvmStatic
        @Throws(IOException::class)
        fun decode(stream: XdrDataInputStream): LedgerUpgrade {
            val decodedLedgerUpgrade = LedgerUpgrade()
            val discriminant = LedgerUpgradeType.decode(stream)
            decodedLedgerUpgrade.discriminant = discriminant
            when (decodedLedgerUpgrade.discriminant) {
                LedgerUpgradeType.LEDGER_UPGRADE_VERSION ->
                    decodedLedgerUpgrade.newLedgerVersion = Uint32.decode(stream)
                LedgerUpgradeType.LEDGER_UPGRADE_BASE_FEE ->
                    decodedLedgerUpgrade.newBaseFee = Uint32.decode(stream)
                LedgerUpgradeType.LEDGER_UPGRADE_MAX_TX_SET_SIZE ->
                    decodedLedgerUpgrade.newMaxTxSetSize = Uint32.decode(stream)
            }
            return decodedLedgerUpgrade
        }
    }
}
