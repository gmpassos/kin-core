// Automatically generated by xdrgen 
// DO NOT EDIT or your changes may be overwritten
package org.kin.stellarfork.xdr

import java.io.IOException

// === xdr source ============================================================
//  union Asset switch (AssetType type)
//  {
//  case ASSET_TYPE_NATIVE: // Not credit
//      void;
//
//  case ASSET_TYPE_CREDIT_ALPHANUM4:
//      struct
//      {
//          opaque assetCode[4]; // 1 to 4 characters
//          AccountID issuer;
//      } alphaNum4;
//
//  case ASSET_TYPE_CREDIT_ALPHANUM12:
//      struct
//      {
//          opaque assetCode[12]; // 5 to 12 characters
//          AccountID issuer;
//      } alphaNum12;
//
//      // add other asset types here in the future
//  };
//  ===========================================================================
class Asset {
    var discriminant: AssetType? = null
    var alphaNum4: AssetAlphaNum4? = null
    var alphaNum12: AssetAlphaNum12? = null

    class AssetAlphaNum4 {
        var assetCode: ByteArray? = null
        var issuer: AccountID? = null

        companion object {
            @JvmStatic
            @Throws(IOException::class)
            fun encode(
                stream: XdrDataOutputStream,
                encodedAssetAlphaNum4: AssetAlphaNum4
            ) {
                val assetCodesize = encodedAssetAlphaNum4.assetCode!!.size
                stream.write(encodedAssetAlphaNum4.assetCode, 0, assetCodesize)
                AccountID.encode(stream, encodedAssetAlphaNum4.issuer!!)
            }

            @JvmStatic
            @Throws(IOException::class)
            fun decode(stream: XdrDataInputStream): AssetAlphaNum4 {
                val decodedAssetAlphaNum4 = AssetAlphaNum4()
                val assetCodesize = 4
                decodedAssetAlphaNum4.assetCode = ByteArray(assetCodesize)
                stream.read(decodedAssetAlphaNum4.assetCode, 0, assetCodesize)
                decodedAssetAlphaNum4.issuer = AccountID.decode(stream)
                return decodedAssetAlphaNum4
            }
        }
    }

    class AssetAlphaNum12 {
        var assetCode: ByteArray? = null
        var issuer: AccountID? = null

        companion object {
            @JvmStatic
            @Throws(IOException::class)
            fun encode(
                stream: XdrDataOutputStream,
                encodedAssetAlphaNum12: AssetAlphaNum12
            ) {
                val assetCodesize = encodedAssetAlphaNum12.assetCode!!.size
                stream.write(encodedAssetAlphaNum12.assetCode, 0, assetCodesize)
                AccountID.encode(stream, encodedAssetAlphaNum12.issuer!!)
            }

            @JvmStatic
            @Throws(IOException::class)
            fun decode(stream: XdrDataInputStream): AssetAlphaNum12 {
                val decodedAssetAlphaNum12 = AssetAlphaNum12()
                val assetCodesize = 12
                decodedAssetAlphaNum12.assetCode = ByteArray(assetCodesize)
                stream.read(decodedAssetAlphaNum12.assetCode, 0, assetCodesize)
                decodedAssetAlphaNum12.issuer = AccountID.decode(stream)
                return decodedAssetAlphaNum12
            }
        }
    }

    companion object {
        @JvmStatic
        @Throws(IOException::class)
        fun encode(
            stream: XdrDataOutputStream,
            encodedAsset: Asset
        ) {
            stream.writeInt(encodedAsset.discriminant!!.value)
            when (encodedAsset.discriminant) {
                AssetType.ASSET_TYPE_NATIVE -> {
                }
                AssetType.ASSET_TYPE_CREDIT_ALPHANUM4 -> AssetAlphaNum4.encode(
                    stream,
                    encodedAsset.alphaNum4!!
                )
                AssetType.ASSET_TYPE_CREDIT_ALPHANUM12 -> AssetAlphaNum12.encode(
                    stream,
                    encodedAsset.alphaNum12!!
                )
            }
        }

        @JvmStatic
        @Throws(IOException::class)
        fun decode(stream: XdrDataInputStream): Asset {
            val decodedAsset = Asset()
            val discriminant = AssetType.decode(stream)
            decodedAsset.discriminant = discriminant
            when (decodedAsset.discriminant) {
                AssetType.ASSET_TYPE_NATIVE -> {
                }
                AssetType.ASSET_TYPE_CREDIT_ALPHANUM4 -> decodedAsset.alphaNum4 =
                    AssetAlphaNum4.decode(stream)
                AssetType.ASSET_TYPE_CREDIT_ALPHANUM12 -> decodedAsset.alphaNum12 =
                    AssetAlphaNum12.decode(stream)
            }
            return decodedAsset
        }
    }
}
