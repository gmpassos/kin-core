// Automatically generated by xdrgen 
// DO NOT EDIT or your changes may be overwritten
package org.kin.stellarfork.xdr

import org.kin.stellarfork.xdr.ManageOfferEffect
import java.io.IOException

// === xdr source ============================================================
//  struct ManageOfferSuccessResult
//  {
//      // offers that got claimed while creating this offer
//      ClaimOfferAtom offersClaimed<>;
//
//      union switch (ManageOfferEffect effect)
//      {
//      case MANAGE_OFFER_CREATED:
//      case MANAGE_OFFER_UPDATED:
//          OfferEntry offer;
//      default:
//          void;
//      }
//      offer;
//  };
//  ===========================================================================
class ManageOfferSuccessResult {
    var offersClaimed: Array<ClaimOfferAtom?> = arrayOfNulls(0)
    var offer: ManageOfferSuccessResultOffer? = null

    class ManageOfferSuccessResultOffer {
        var discriminant: ManageOfferEffect? = null
        var offer: OfferEntry? = null

        companion object {
            @JvmStatic
            @Throws(IOException::class)
            fun encode(
                stream: XdrDataOutputStream,
                encodedManageOfferSuccessResultOffer: ManageOfferSuccessResultOffer
            ) {
                stream.writeInt(encodedManageOfferSuccessResultOffer.discriminant!!.value)
                when (encodedManageOfferSuccessResultOffer.discriminant) {
                    ManageOfferEffect.MANAGE_OFFER_CREATED, ManageOfferEffect.MANAGE_OFFER_UPDATED -> OfferEntry.encode(
                        stream,
                        encodedManageOfferSuccessResultOffer.offer!!
                    )
                    else -> {
                    }
                }
            }

            @JvmStatic
            @Throws(IOException::class)
            fun decode(stream: XdrDataInputStream): ManageOfferSuccessResultOffer {
                val decodedManageOfferSuccessResultOffer =
                    ManageOfferSuccessResultOffer()
                val discriminant = ManageOfferEffect.decode(stream)
                decodedManageOfferSuccessResultOffer.discriminant = discriminant
                when (decodedManageOfferSuccessResultOffer.discriminant) {
                    ManageOfferEffect.MANAGE_OFFER_CREATED, ManageOfferEffect.MANAGE_OFFER_UPDATED -> decodedManageOfferSuccessResultOffer.offer =
                        OfferEntry.decode(stream)
                    else -> {
                    }
                }
                return decodedManageOfferSuccessResultOffer
            }
        }
    }

    companion object {
        @JvmStatic
        @Throws(IOException::class)
        fun encode(
            stream: XdrDataOutputStream,
            encodedManageOfferSuccessResult: ManageOfferSuccessResult
        ) {
            val offersClaimedsize = encodedManageOfferSuccessResult.offersClaimed.size
            stream.writeInt(offersClaimedsize)
            (0 until offersClaimedsize).forEach { i ->
                ClaimOfferAtom.encode(stream, encodedManageOfferSuccessResult.offersClaimed[i]!!)
            }
            ManageOfferSuccessResultOffer.encode(
                stream,
                encodedManageOfferSuccessResult.offer!!
            )
        }

        @Throws(IOException::class)
        fun decode(stream: XdrDataInputStream): ManageOfferSuccessResult {
            val decodedManageOfferSuccessResult =
                ManageOfferSuccessResult()
            val offersClaimedsize = stream.readInt()
            decodedManageOfferSuccessResult.offersClaimed =
                arrayOfNulls(offersClaimedsize)
            (0 until offersClaimedsize).forEach { i ->
                decodedManageOfferSuccessResult.offersClaimed[i] = ClaimOfferAtom.decode(stream)
            }
            decodedManageOfferSuccessResult.offer = ManageOfferSuccessResultOffer.decode(stream)
            return decodedManageOfferSuccessResult
        }
    }
}
