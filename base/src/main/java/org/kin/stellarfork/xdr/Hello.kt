// Automatically generated by xdrgen 
// DO NOT EDIT or your changes may be overwritten
package org.kin.stellarfork.xdr

import java.io.IOException

// === xdr source ============================================================
//  struct Hello
//  {
//      uint32 ledgerVersion;
//      uint32 overlayVersion;
//      uint32 overlayMinVersion;
//      Hash networkID;
//      string versionStr<100>;
//      int listeningPort;
//      NodeID peerID;
//      AuthCert cert;
//      uint256 nonce;
//  };
//  ===========================================================================
class Hello {
    var ledgerVersion: Uint32? = null
    var overlayVersion: Uint32? = null
    var overlayMinVersion: Uint32? = null
    var networkID: Hash? = null
    var versionStr: String? = null
    var listeningPort: Int? = null
    var peerID: NodeID? = null
    var cert: AuthCert? = null
    var nonce: Uint256? = null

    companion object {
        @JvmStatic
        @Throws(IOException::class)
        fun encode(stream: XdrDataOutputStream, encodedHello: Hello) {
            Uint32.encode(stream, encodedHello.ledgerVersion!!)
            Uint32.encode(stream, encodedHello.overlayVersion!!)
            Uint32.encode(stream, encodedHello.overlayMinVersion!!)
            Hash.encode(stream, encodedHello.networkID!!)
            stream.writeString(encodedHello.versionStr!!)
            stream.writeInt(encodedHello.listeningPort!!)
            NodeID.encode(stream, encodedHello.peerID!!)
            AuthCert.encode(stream, encodedHello.cert!!)
            Uint256.encode(stream, encodedHello.nonce!!)
        }

        @JvmStatic
        @Throws(IOException::class)
        fun decode(stream: XdrDataInputStream): Hello {
            val decodedHello = Hello()
            decodedHello.ledgerVersion = Uint32.decode(stream)
            decodedHello.overlayVersion = Uint32.decode(stream)
            decodedHello.overlayMinVersion = Uint32.decode(stream)
            decodedHello.networkID = Hash.decode(stream)
            decodedHello.versionStr = stream.readString()
            decodedHello.listeningPort = stream.readInt()
            decodedHello.peerID = NodeID.decode(stream)
            decodedHello.cert = AuthCert.decode(stream)
            decodedHello.nonce = Uint256.decode(stream)
            return decodedHello
        }
    }
}
