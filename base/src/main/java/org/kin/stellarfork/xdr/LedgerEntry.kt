// Automatically generated by xdrgen 
// DO NOT EDIT or your changes may be overwritten
package org.kin.stellarfork.xdr

import java.io.IOException

// === xdr source ============================================================
//  struct LedgerEntry
//  {
//      uint32 lastModifiedLedgerSeq; // ledger the LedgerEntry was last changed
//
//      union switch (LedgerEntryType type)
//      {
//      case ACCOUNT:
//          AccountEntry account;
//      case TRUSTLINE:
//          TrustLineEntry trustLine;
//      case OFFER:
//          OfferEntry offer;
//      case DATA:
//          DataEntry data;
//      }
//      data;
//
//      // reserved for future use
//      union switch (int v)
//      {
//      case 0:
//          void;
//      }
//      ext;
//  };
//  ===========================================================================
class LedgerEntry {
    var lastModifiedLedgerSeq: Uint32? = null
    var data: LedgerEntryData? = null
    var ext: LedgerEntryExt? = null

    class LedgerEntryData {
        var discriminant: LedgerEntryType? = null
        var account: AccountEntry? = null
        var trustLine: TrustLineEntry? = null
        var offer: OfferEntry? = null
        var data: DataEntry? = null

        companion object {
            @JvmStatic
            @Throws(IOException::class)
            fun encode(
                stream: XdrDataOutputStream,
                encodedLedgerEntryData: LedgerEntryData
            ) {
                stream.writeInt(encodedLedgerEntryData.discriminant!!.value)
                when (encodedLedgerEntryData.discriminant) {
                    LedgerEntryType.ACCOUNT -> AccountEntry.encode(
                        stream,
                        encodedLedgerEntryData.account!!
                    )
                    LedgerEntryType.TRUSTLINE -> TrustLineEntry.encode(
                        stream,
                        encodedLedgerEntryData.trustLine!!
                    )
                    LedgerEntryType.OFFER -> OfferEntry.encode(stream, encodedLedgerEntryData.offer!!)
                    LedgerEntryType.DATA -> DataEntry.encode(stream, encodedLedgerEntryData.data!!)
                }
            }

            @JvmStatic
            @Throws(IOException::class)
            fun decode(stream: XdrDataInputStream): LedgerEntryData {
                val decodedLedgerEntryData = LedgerEntryData()
                val discriminant = LedgerEntryType.decode(stream)
                decodedLedgerEntryData.discriminant = discriminant
                when (decodedLedgerEntryData.discriminant) {
                    LedgerEntryType.ACCOUNT -> decodedLedgerEntryData.account =
                        AccountEntry.decode(stream)
                    LedgerEntryType.TRUSTLINE -> decodedLedgerEntryData.trustLine =
                        TrustLineEntry.decode(stream)
                    LedgerEntryType.OFFER -> decodedLedgerEntryData.offer =
                        OfferEntry.decode(stream)
                    LedgerEntryType.DATA -> decodedLedgerEntryData.data = DataEntry.decode(stream)
                }
                return decodedLedgerEntryData
            }
        }
    }

    class LedgerEntryExt {
        var discriminant: Int? = null

        companion object {
            @JvmStatic
            @Throws(IOException::class)
            fun encode(
                stream: XdrDataOutputStream,
                encodedLedgerEntryExt: LedgerEntryExt
            ) {
                stream.writeInt(encodedLedgerEntryExt.discriminant!!.toInt())
                when (encodedLedgerEntryExt.discriminant) {
                    0 -> {
                    }
                }
            }

            @JvmStatic
            @Throws(IOException::class)
            fun decode(stream: XdrDataInputStream): LedgerEntryExt {
                val decodedLedgerEntryExt = LedgerEntryExt()
                val discriminant = stream.readInt()
                decodedLedgerEntryExt.discriminant = discriminant
                when (decodedLedgerEntryExt.discriminant) {
                    0 -> {
                    }
                }
                return decodedLedgerEntryExt
            }
        }
    }

    companion object {
        @JvmStatic
        @Throws(IOException::class)
        fun encode(stream: XdrDataOutputStream, encodedLedgerEntry: LedgerEntry) {
            Uint32.encode(stream, encodedLedgerEntry.lastModifiedLedgerSeq!!)
            LedgerEntryData.encode(stream, encodedLedgerEntry.data!!)
            LedgerEntryExt.encode(stream, encodedLedgerEntry.ext!!)
        }

        @JvmStatic
        @Throws(IOException::class)
        fun decode(stream: XdrDataInputStream): LedgerEntry {
            val decodedLedgerEntry = LedgerEntry()
            decodedLedgerEntry.lastModifiedLedgerSeq = Uint32.decode(stream)
            decodedLedgerEntry.data = LedgerEntryData.decode(stream)
            decodedLedgerEntry.ext = LedgerEntryExt.decode(stream)
            return decodedLedgerEntry
        }
    }
}
