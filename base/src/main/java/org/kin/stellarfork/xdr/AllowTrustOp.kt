// Automatically generated by xdrgen 
// DO NOT EDIT or your changes may be overwritten
package org.kin.stellarfork.xdr

import java.io.IOException

// === xdr source ============================================================
//  struct AllowTrustOp
//  {
//      AccountID trustor;
//      union switch (AssetType type)
//      {
//      // ASSET_TYPE_NATIVE is not allowed
//      case ASSET_TYPE_CREDIT_ALPHANUM4:
//          opaque assetCode4[4];
//
//      case ASSET_TYPE_CREDIT_ALPHANUM12:
//          opaque assetCode12[12];
//
//          // add other asset types here in the future
//      }
//      asset;
//
//      bool authorize;
//  };
//  ===========================================================================
class AllowTrustOp {
    var trustor: AccountID? = null
    var asset: AllowTrustOpAsset? = null
    var authorize: Boolean? = null

    class AllowTrustOpAsset {
        var discriminant: AssetType? = null
        var assetCode4: ByteArray? = null
        var assetCode12: ByteArray? = null

        companion object {
            @JvmStatic
            @Throws(IOException::class)
            fun encode(
                stream: XdrDataOutputStream,
                encodedAllowTrustOpAsset: AllowTrustOpAsset
            ) {
                stream.writeInt(encodedAllowTrustOpAsset.discriminant!!.value)
                when (encodedAllowTrustOpAsset.discriminant) {
                    AssetType.ASSET_TYPE_CREDIT_ALPHANUM4 -> {
                        val assetCode4size = encodedAllowTrustOpAsset.assetCode4!!.size
                        stream.write(encodedAllowTrustOpAsset.assetCode4!!, 0, assetCode4size)
                    }
                    AssetType.ASSET_TYPE_CREDIT_ALPHANUM12 -> {
                        val assetCode12size = encodedAllowTrustOpAsset.assetCode12!!.size
                        stream.write(encodedAllowTrustOpAsset.assetCode12!!, 0, assetCode12size)
                    }
                    AssetType.ASSET_TYPE_NATIVE,
                    null -> {
                        // shouldn't be possible
                    }
                }
            }

            @JvmStatic
            @Throws(IOException::class)
            fun decode(stream: XdrDataInputStream): AllowTrustOpAsset {
                val decodedAllowTrustOpAsset = AllowTrustOpAsset()
                val discriminant = AssetType.decode(stream)
                decodedAllowTrustOpAsset.discriminant = discriminant
                when (decodedAllowTrustOpAsset.discriminant) {
                    AssetType.ASSET_TYPE_CREDIT_ALPHANUM4 -> {
                        val assetCode4size = 4
                        decodedAllowTrustOpAsset.assetCode4 = ByteArray(assetCode4size)
                        stream.read(decodedAllowTrustOpAsset.assetCode4!!, 0, assetCode4size)
                    }
                    AssetType.ASSET_TYPE_CREDIT_ALPHANUM12 -> {
                        val assetCode12size = 12
                        decodedAllowTrustOpAsset.assetCode12 = ByteArray(assetCode12size)
                        stream.read(decodedAllowTrustOpAsset.assetCode12!!, 0, assetCode12size)
                    }
                    AssetType.ASSET_TYPE_NATIVE,
                    null -> {
                        // shouldn't be possible
                    }
                }
                return decodedAllowTrustOpAsset
            }
        }
    }

    companion object {
        @JvmStatic
        @Throws(IOException::class)
        fun encode(stream: XdrDataOutputStream, encodedAllowTrustOp: AllowTrustOp) {
            AccountID.encode(stream, encodedAllowTrustOp.trustor!!)
            AllowTrustOpAsset.encode(stream, encodedAllowTrustOp.asset!!)
            stream.writeInt(if (encodedAllowTrustOp.authorize!!) 1 else 0)
        }

        @JvmStatic
        @Throws(IOException::class)
        fun decode(stream: XdrDataInputStream): AllowTrustOp {
            val decodedAllowTrustOp = AllowTrustOp()
            decodedAllowTrustOp.trustor = AccountID.decode(stream)
            decodedAllowTrustOp.asset = AllowTrustOpAsset.decode(stream)
            decodedAllowTrustOp.authorize = stream.readInt() == 1
            return decodedAllowTrustOp
        }
    }
}
