// Automatically generated by xdrgen 
// DO NOT EDIT or your changes may be overwritten
package org.kin.stellarfork.xdr

import java.io.IOException

// === xdr source ============================================================
//  struct TrustLineEntry
//  {
//      AccountID accountID; // account this trustline belongs to
//      Asset asset;         // type of asset (with issuer)
//      int64 balance;       // how much of this asset the user has.
//                           // Asset defines the unit for this;
//
//      int64 limit;  // balance cannot be above this
//      uint32 flags; // see TrustLineFlags
//
//      // reserved for future use
//      union switch (int v)
//      {
//      case 0:
//          void;
//      }
//      ext;
//  };
//  ===========================================================================
class TrustLineEntry {
    var accountID: AccountID? = null
    var asset: Asset? = null
    var balance: Int64? = null
    var limit: Int64? = null
    var flags: Uint32? = null
    var ext: TrustLineEntryExt? = null

    class TrustLineEntryExt {
        var discriminant: Int? = null

        companion object {
            @JvmStatic
            @Throws(IOException::class)
            fun encode(
                stream: XdrDataOutputStream,
                encodedTrustLineEntryExt: TrustLineEntryExt
            ) {
                stream.writeInt(encodedTrustLineEntryExt.discriminant!!.toInt())
                when (encodedTrustLineEntryExt.discriminant) {
                    0 -> {
                    }
                }
            }

            @JvmStatic
            @Throws(IOException::class)
            fun decode(stream: XdrDataInputStream): TrustLineEntryExt {
                val decodedTrustLineEntryExt = TrustLineEntryExt()
                val discriminant = stream.readInt()
                decodedTrustLineEntryExt.discriminant = discriminant
                when (decodedTrustLineEntryExt.discriminant) {
                    0 -> {
                    }
                }
                return decodedTrustLineEntryExt
            }
        }
    }

    companion object {
        @JvmStatic
        @Throws(IOException::class)
        fun encode(
            stream: XdrDataOutputStream,
            encodedTrustLineEntry: TrustLineEntry
        ) {
            AccountID.encode(stream, encodedTrustLineEntry.accountID!!)
            Asset.encode(stream, encodedTrustLineEntry.asset!!)
            Int64.encode(stream, encodedTrustLineEntry.balance!!)
            Int64.encode(stream, encodedTrustLineEntry.limit!!)
            Uint32.encode(stream, encodedTrustLineEntry.flags!!)
            TrustLineEntryExt.encode(stream, encodedTrustLineEntry.ext!!)
        }

        @JvmStatic
        @Throws(IOException::class)
        fun decode(stream: XdrDataInputStream): TrustLineEntry {
            val decodedTrustLineEntry = TrustLineEntry()
            decodedTrustLineEntry.accountID = AccountID.decode(stream)
            decodedTrustLineEntry.asset = Asset.decode(stream)
            decodedTrustLineEntry.balance = Int64.decode(stream)
            decodedTrustLineEntry.limit = Int64.decode(stream)
            decodedTrustLineEntry.flags = Uint32.decode(stream)
            decodedTrustLineEntry.ext = TrustLineEntryExt.decode(stream)
            return decodedTrustLineEntry
        }
    }
}
