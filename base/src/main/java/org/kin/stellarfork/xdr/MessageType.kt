// Automatically generated by xdrgen 
// DO NOT EDIT or your changes may be overwritten
package org.kin.stellarfork.xdr

import java.io.IOException

// === xdr source ============================================================
//  enum MessageType
//  {
//      ERROR_MSG = 0,
//      AUTH = 2,
//      DONT_HAVE = 3,
//
//      GET_PEERS = 4, // gets a list of peers this guy knows about
//      PEERS = 5,
//
//      GET_TX_SET = 6, // gets a particular txset by hash
//      TX_SET = 7,
//
//      TRANSACTION = 8, // pass on a tx you have heard about
//
//      // SCP
//      GET_SCP_QUORUMSET = 9,
//      SCP_QUORUMSET = 10,
//      SCP_MESSAGE = 11,
//      GET_SCP_STATE = 12,
//
//      // new messages
//      HELLO = 13
//  };
//  ===========================================================================
enum class MessageType(val value: Int) {
    ERROR_MSG(0),
    AUTH(2),
    DONT_HAVE(3),
    GET_PEERS(4),
    PEERS(5),
    GET_TX_SET(6),
    TX_SET(7),
    TRANSACTION(8),
    GET_SCP_QUORUMSET(9),
    SCP_QUORUMSET(10),
    SCP_MESSAGE(11),
    GET_SCP_STATE(12),
    HELLO(13);

    companion object {
        @JvmStatic
        @Throws(IOException::class)
        fun decode(stream: XdrDataInputStream): MessageType {
            val value = stream.readInt()
            return when (value) {
                0 -> ERROR_MSG
                2 -> AUTH
                3 -> DONT_HAVE
                4 -> GET_PEERS
                5 -> PEERS
                6 -> GET_TX_SET
                7 -> TX_SET
                8 -> TRANSACTION
                9 -> GET_SCP_QUORUMSET
                10 -> SCP_QUORUMSET
                11 -> SCP_MESSAGE
                12 -> GET_SCP_STATE
                13 -> HELLO
                else -> throw RuntimeException("Unknown enum value: $value")
            }
        }

        @JvmStatic
        @Throws(IOException::class)
        fun encode(
            stream: XdrDataOutputStream,
            value: MessageType
        ) {
            stream.writeInt(value.value)
        }
    }

}
