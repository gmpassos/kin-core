// Automatically generated by xdrgen 
// DO NOT EDIT or your changes may be overwritten
package org.kin.stellarfork.xdr

import org.kin.stellarfork.xdr.AccountID.Companion.encode
import java.io.IOException

// === xdr source ============================================================
//  struct Operation
//  {
//      // sourceAccount is the account used to run the operation
//      // if not set, the runtime defaults to "sourceAccount" specified at
//      // the transaction level
//      AccountID* sourceAccount;
//
//      union switch (OperationType type)
//      {
//      case CREATE_ACCOUNT:
//          CreateAccountOp createAccountOp;
//      case PAYMENT:
//          PaymentOp paymentOp;
//      case PATH_PAYMENT:
//          PathPaymentOp pathPaymentOp;
//      case MANAGE_OFFER:
//          ManageOfferOp manageOfferOp;
//      case CREATE_PASSIVE_OFFER:
//          CreatePassiveOfferOp createPassiveOfferOp;
//      case SET_OPTIONS:
//          SetOptionsOp setOptionsOp;
//      case CHANGE_TRUST:
//          ChangeTrustOp changeTrustOp;
//      case ALLOW_TRUST:
//          AllowTrustOp allowTrustOp;
//      case ACCOUNT_MERGE:
//          AccountID destination;
//      case INFLATION:
//          void;
//      case MANAGE_DATA:
//          ManageDataOp manageDataOp;
//      }
//      body;
//  };
//  ===========================================================================
class Operation {
    var sourceAccount: AccountID? = null
    var body: OperationBody? = null

    class OperationBody {
        var discriminant: OperationType? = null
        var createAccountOp: CreateAccountOp? = null
        var paymentOp: PaymentOp? = null
        var pathPaymentOp: PathPaymentOp? = null
        var manageOfferOp: ManageOfferOp? = null
        var createPassiveOfferOp: CreatePassiveOfferOp? = null
        var setOptionsOp: SetOptionsOp? = null
        var changeTrustOp: ChangeTrustOp? = null
        var allowTrustOp: AllowTrustOp? = null
        var destination: AccountID? = null
        var manageDataOp: ManageDataOp? = null

        companion object {
            @JvmStatic
            @Throws(IOException::class)
            fun encode(
                stream: XdrDataOutputStream,
                encodedOperationBody: OperationBody?
            ) {
                stream.writeInt(encodedOperationBody!!.discriminant!!.value)
                when (encodedOperationBody.discriminant) {
                    OperationType.CREATE_ACCOUNT -> CreateAccountOp.encode(
                        stream,
                        encodedOperationBody.createAccountOp!!
                    )
                    OperationType.PAYMENT -> PaymentOp.encode(
                        stream,
                        encodedOperationBody.paymentOp!!
                    )
                    OperationType.PATH_PAYMENT -> PathPaymentOp.encode(
                        stream,
                        encodedOperationBody.pathPaymentOp!!
                    )
                    OperationType.MANAGE_OFFER -> ManageOfferOp.encode(
                        stream,
                        encodedOperationBody.manageOfferOp!!
                    )
                    OperationType.CREATE_PASSIVE_OFFER -> CreatePassiveOfferOp.encode(
                        stream,
                        encodedOperationBody.createPassiveOfferOp!!
                    )
                    OperationType.SET_OPTIONS -> SetOptionsOp.encode(
                        stream,
                        encodedOperationBody.setOptionsOp!!
                    )
                    OperationType.CHANGE_TRUST -> ChangeTrustOp.encode(
                        stream,
                        encodedOperationBody.changeTrustOp!!
                    )
                    OperationType.ALLOW_TRUST -> AllowTrustOp.encode(
                        stream,
                        encodedOperationBody.allowTrustOp!!
                    )
                    OperationType.ACCOUNT_MERGE -> encode(
                        stream,
                        encodedOperationBody.destination!!
                    )
                    OperationType.INFLATION -> {
                    }
                    OperationType.MANAGE_DATA -> ManageDataOp.encode(
                        stream,
                        encodedOperationBody.manageDataOp!!
                    )
                }
            }

            @JvmStatic
            @Throws(IOException::class)
            fun decode(stream: XdrDataInputStream): OperationBody {
                val decodedOperationBody = OperationBody()
                val discriminant = OperationType.decode(stream)
                decodedOperationBody.discriminant = discriminant
                when (decodedOperationBody.discriminant) {
                    OperationType.CREATE_ACCOUNT ->
                        decodedOperationBody.createAccountOp = CreateAccountOp.decode(stream)
                    OperationType.PAYMENT ->
                        decodedOperationBody.paymentOp = PaymentOp.decode(stream)
                    OperationType.PATH_PAYMENT ->
                        decodedOperationBody.pathPaymentOp = PathPaymentOp.decode(stream)
                    OperationType.MANAGE_OFFER ->
                        decodedOperationBody.manageOfferOp = ManageOfferOp.decode(stream)
                    OperationType.CREATE_PASSIVE_OFFER ->
                        decodedOperationBody.createPassiveOfferOp =
                            CreatePassiveOfferOp.decode(stream)
                    OperationType.SET_OPTIONS ->
                        decodedOperationBody.setOptionsOp = SetOptionsOp.decode(stream)
                    OperationType.CHANGE_TRUST ->
                        decodedOperationBody.changeTrustOp = ChangeTrustOp.decode(stream)
                    OperationType.ALLOW_TRUST ->
                        decodedOperationBody.allowTrustOp = AllowTrustOp.decode(stream)
                    OperationType.ACCOUNT_MERGE ->
                        decodedOperationBody.destination = AccountID.decode(stream)
                    OperationType.INFLATION -> {
                    }
                    OperationType.MANAGE_DATA ->
                        decodedOperationBody.manageDataOp = ManageDataOp.decode(stream)
                }
                return decodedOperationBody
            }
        }
    }

    companion object {
        @JvmStatic
        @Throws(IOException::class)
        fun encode(
            stream: XdrDataOutputStream,
            encodedOperation: Operation
        ) {
            if (encodedOperation.sourceAccount != null) {
                stream.writeInt(1)
                encode(stream, encodedOperation.sourceAccount!!)
            } else {
                stream.writeInt(0)
            }
            OperationBody.encode(stream, encodedOperation.body)
        }

        @JvmStatic
        @Throws(IOException::class)
        fun decode(stream: XdrDataInputStream): Operation {
            val decodedOperation = Operation()
            val sourceAccountPresent = stream.readInt()
            if (sourceAccountPresent != 0) {
                decodedOperation.sourceAccount = AccountID.decode(stream)
            }
            decodedOperation.body = OperationBody.decode(stream)
            return decodedOperation
        }
    }
}
