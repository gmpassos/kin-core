// Automatically generated by xdrgen 
// DO NOT EDIT or your changes may be overwritten
package org.kin.stellarfork.xdr

import org.kin.stellarfork.xdr.LedgerEntryChangeType.LEDGER_ENTRY_CREATED
import org.kin.stellarfork.xdr.LedgerEntryChangeType.LEDGER_ENTRY_REMOVED
import org.kin.stellarfork.xdr.LedgerEntryChangeType.LEDGER_ENTRY_STATE
import org.kin.stellarfork.xdr.LedgerEntryChangeType.LEDGER_ENTRY_UPDATED
import java.io.IOException

// === xdr source ============================================================
//  union LedgerEntryChange switch (LedgerEntryChangeType type)
//  {
//  case LEDGER_ENTRY_CREATED:
//      LedgerEntry created;
//  case LEDGER_ENTRY_UPDATED:
//      LedgerEntry updated;
//  case LEDGER_ENTRY_REMOVED:
//      LedgerKey removed;
//  case LEDGER_ENTRY_STATE:
//      LedgerEntry state;
//  };
//  ===========================================================================
class LedgerEntryChange {
    var discriminant: LedgerEntryChangeType? = null
    var created: LedgerEntry? = null
    var updated: LedgerEntry? = null
    var removed: LedgerKey? = null
    var state: LedgerEntry? = null

    companion object {
        @JvmStatic
        @Throws(IOException::class)
        fun encode(
            stream: XdrDataOutputStream,
            encodedLedgerEntryChange: LedgerEntryChange
        ) {
            stream.writeInt(encodedLedgerEntryChange.discriminant!!.value)
            when (encodedLedgerEntryChange.discriminant) {
                LEDGER_ENTRY_CREATED -> LedgerEntry.encode(
                    stream,
                    encodedLedgerEntryChange.created!!
                )
                LEDGER_ENTRY_UPDATED -> LedgerEntry.encode(
                    stream,
                    encodedLedgerEntryChange.updated!!
                )
                LEDGER_ENTRY_REMOVED -> LedgerKey.encode(
                    stream,
                    encodedLedgerEntryChange.removed!!
                )
                LEDGER_ENTRY_STATE -> LedgerEntry.encode(
                    stream,
                    encodedLedgerEntryChange.state!!
                )
            }
        }

        @JvmStatic
        @Throws(IOException::class)
        fun decode(stream: XdrDataInputStream): LedgerEntryChange {
            val decodedLedgerEntryChange =
                LedgerEntryChange()
            val discriminant = LedgerEntryChangeType.decode(stream)
            decodedLedgerEntryChange.discriminant = discriminant
            when (decodedLedgerEntryChange.discriminant) {
                LEDGER_ENTRY_CREATED ->
                    decodedLedgerEntryChange.created = LedgerEntry.decode(stream)
                LEDGER_ENTRY_UPDATED ->
                    decodedLedgerEntryChange.updated = LedgerEntry.decode(stream)
                LEDGER_ENTRY_REMOVED ->
                    decodedLedgerEntryChange.removed = LedgerKey.decode(stream)
                LEDGER_ENTRY_STATE ->
                    decodedLedgerEntryChange.state = LedgerEntry.decode(stream)
            }
            return decodedLedgerEntryChange
        }
    }
}
