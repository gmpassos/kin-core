// Automatically generated by xdrgen 
// DO NOT EDIT or your changes may be overwritten
package org.kin.stellarfork.xdr

import java.io.IOException

// === xdr source ============================================================
//  struct LedgerSCPMessages
//  {
//      uint32 ledgerSeq;
//      SCPEnvelope messages<>;
//  };
//  ===========================================================================
class LedgerSCPMessages {
    var ledgerSeq: Uint32? = null
    var messages: Array<SCPEnvelope?> = arrayOfNulls(0)

    companion object {
        @JvmStatic
        @Throws(IOException::class)
        fun encode(
            stream: XdrDataOutputStream,
            encodedLedgerSCPMessages: LedgerSCPMessages
        ) {
            Uint32.encode(stream, encodedLedgerSCPMessages.ledgerSeq!!)
            val messagessize = encodedLedgerSCPMessages.messages.size
            stream.writeInt(messagessize)
            for (i in 0 until messagessize) {
                SCPEnvelope.encode(stream, encodedLedgerSCPMessages.messages[i]!!)
            }
        }

        @JvmStatic
        @Throws(IOException::class)
        fun decode(stream: XdrDataInputStream): LedgerSCPMessages {
            val decodedLedgerSCPMessages = LedgerSCPMessages()
            decodedLedgerSCPMessages.ledgerSeq = Uint32.decode(stream)
            val messagessize = stream.readInt()
            decodedLedgerSCPMessages.messages = arrayOfNulls(messagessize)
            for (i in 0 until messagessize) {
                decodedLedgerSCPMessages.messages[i] = SCPEnvelope.decode(stream)
            }
            return decodedLedgerSCPMessages
        }
    }
}
