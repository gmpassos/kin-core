// Automatically generated by xdrgen 
// DO NOT EDIT or your changes may be overwritten
package org.kin.stellarfork.xdr

import java.io.IOException

// === xdr source ============================================================
//  union BucketEntry switch (BucketEntryType type)
//  {
//  case LIVEENTRY:
//      LedgerEntry liveEntry;
//
//  case DEADENTRY:
//      LedgerKey deadEntry;
//  };
//  ===========================================================================
class BucketEntry {
    var discriminant: BucketEntryType? = null
    var liveEntry: LedgerEntry? = null
    var deadEntry: LedgerKey? = null

    companion object {
        @JvmStatic
        @Throws(IOException::class)
        fun encode(stream: XdrDataOutputStream, encodedBucketEntry: BucketEntry) {
            stream.writeInt(encodedBucketEntry.discriminant!!.value)
            when (encodedBucketEntry.discriminant) {
                BucketEntryType.LIVEENTRY -> LedgerEntry.encode(
                    stream,
                    encodedBucketEntry.liveEntry!!
                )
                BucketEntryType.DEADENTRY -> LedgerKey.encode(stream, encodedBucketEntry.deadEntry!!)
            }
        }

        @JvmStatic
        @Throws(IOException::class)
        fun decode(stream: XdrDataInputStream): BucketEntry {
            val decodedBucketEntry = BucketEntry()
            val discriminant = BucketEntryType.decode(stream)
            decodedBucketEntry.discriminant = discriminant
            when (decodedBucketEntry.discriminant) {
                BucketEntryType.LIVEENTRY -> decodedBucketEntry.liveEntry =
                    LedgerEntry.decode(stream)
                BucketEntryType.DEADENTRY -> decodedBucketEntry.deadEntry = LedgerKey.decode(stream)
            }
            return decodedBucketEntry
        }
    }
}
