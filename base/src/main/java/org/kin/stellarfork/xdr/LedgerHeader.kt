// Automatically generated by xdrgen 
// DO NOT EDIT or your changes may be overwritten
package org.kin.stellarfork.xdr

import java.io.IOException

// === xdr source ============================================================
//  struct LedgerHeader
//  {
//      uint32 ledgerVersion;    // the protocol version of the ledger
//      Hash previousLedgerHash; // hash of the previous ledger header
//      StellarValue scpValue;   // what consensus agreed to
//      Hash txSetResultHash;    // the TransactionResultSet that led to this ledger
//      Hash bucketListHash;     // hash of the ledger state
//
//      uint32 ledgerSeq; // sequence number of this ledger
//
//      int64 totalCoins; // total number of stroops in existence.
//                        // 10,000,000 stroops in 1 XLM
//
//      int64 feePool;       // fees burned since last inflation run
//      uint32 inflationSeq; // inflation sequence number
//
//      uint64 idPool; // last used global ID, used for generating objects
//
//      uint32 baseFee;     // base fee per operation in stroops
//      uint32 baseReserve; // account base reserve in stroops
//
//      uint32 maxTxSetSize; // maximum size a transaction set can be
//
//      Hash skipList[4]; // hashes of ledgers in the past. allows you to jump back
//                        // in time without walking the chain back ledger by ledger
//                        // each slot contains the oldest ledger that is mod of
//                        // either 50  5000  50000 or 500000 depending on index
//                        // skipList[0] mod(50), skipList[1] mod(5000), etc
//
//      // reserved for future use
//      union switch (int v)
//      {
//      case 0:
//          void;
//      }
//      ext;
//  };
//  ===========================================================================
class LedgerHeader {
    var ledgerVersion: Uint32? = null
    var previousLedgerHash: Hash? = null
    var scpValue: StellarValue? = null
    var txSetResultHash: Hash? = null
    var bucketListHash: Hash? = null
    var ledgerSeq: Uint32? = null
    var totalCoins: Int64? = null
    var feePool: Int64? = null
    var inflationSeq: Uint32? = null
    var idPool: Uint64? = null
    var baseFee: Uint32? = null
    var baseReserve: Uint32? = null
    var maxTxSetSize: Uint32? = null
    var skipList: Array<Hash?> = arrayOfNulls(0)
    var ext: LedgerHeaderExt? = null

    class LedgerHeaderExt {
        var discriminant: Int? = null

        companion object {
            @Throws(IOException::class)
            fun encode(
                stream: XdrDataOutputStream,
                encodedLedgerHeaderExt: LedgerHeaderExt?
            ) {
                stream.writeInt(encodedLedgerHeaderExt!!.discriminant!!.toInt())
                when (encodedLedgerHeaderExt.discriminant) {
                    0 -> {
                    }
                }
            }

            @Throws(IOException::class)
            fun decode(stream: XdrDataInputStream): LedgerHeaderExt {
                val decodedLedgerHeaderExt = LedgerHeaderExt()
                val discriminant = stream.readInt()
                decodedLedgerHeaderExt.discriminant = discriminant
                when (decodedLedgerHeaderExt.discriminant) {
                    0 -> {
                    }
                }
                return decodedLedgerHeaderExt
            }
        }
    }

    companion object {
        @JvmStatic
        @Throws(IOException::class)
        fun encode(stream: XdrDataOutputStream, encodedLedgerHeader: LedgerHeader) {
            Uint32.encode(stream, encodedLedgerHeader.ledgerVersion!!)
            Hash.encode(stream, encodedLedgerHeader.previousLedgerHash!!)
            StellarValue.encode(stream, encodedLedgerHeader.scpValue!!)
            Hash.encode(stream, encodedLedgerHeader.txSetResultHash!!)
            Hash.encode(stream, encodedLedgerHeader.bucketListHash!!)
            Uint32.encode(stream, encodedLedgerHeader.ledgerSeq!!)
            Int64.encode(stream, encodedLedgerHeader.totalCoins!!)
            Int64.encode(stream, encodedLedgerHeader.feePool!!)
            Uint32.encode(stream, encodedLedgerHeader.inflationSeq!!)
            Uint64.encode(stream, encodedLedgerHeader.idPool!!)
            Uint32.encode(stream, encodedLedgerHeader.baseFee!!)
            Uint32.encode(stream, encodedLedgerHeader.baseReserve!!)
            Uint32.encode(stream, encodedLedgerHeader.maxTxSetSize!!)
            val skipListsize = encodedLedgerHeader.skipList.size
            (0 until skipListsize).forEach { i ->
                Hash.encode(stream, encodedLedgerHeader.skipList[i]!!)
            }
            LedgerHeaderExt.encode(stream, encodedLedgerHeader.ext)
        }

        @JvmStatic
        @Throws(IOException::class)
        fun decode(stream: XdrDataInputStream): LedgerHeader {
            val decodedLedgerHeader = LedgerHeader()
            decodedLedgerHeader.ledgerVersion = Uint32.decode(stream)
            decodedLedgerHeader.previousLedgerHash = Hash.decode(stream)
            decodedLedgerHeader.scpValue = StellarValue.decode(stream)
            decodedLedgerHeader.txSetResultHash = Hash.decode(stream)
            decodedLedgerHeader.bucketListHash = Hash.decode(stream)
            decodedLedgerHeader.ledgerSeq = Uint32.decode(stream)
            decodedLedgerHeader.totalCoins = Int64.decode(stream)
            decodedLedgerHeader.feePool = Int64.decode(stream)
            decodedLedgerHeader.inflationSeq = Uint32.decode(stream)
            decodedLedgerHeader.idPool = Uint64.decode(stream)
            decodedLedgerHeader.baseFee = Uint32.decode(stream)
            decodedLedgerHeader.baseReserve = Uint32.decode(stream)
            decodedLedgerHeader.maxTxSetSize = Uint32.decode(stream)
            val skipListsize = 4
            decodedLedgerHeader.skipList = arrayOfNulls(skipListsize)
            (0 until skipListsize).forEach { i ->
                decodedLedgerHeader.skipList[i] = Hash.decode(stream)
            }
            decodedLedgerHeader.ext = LedgerHeaderExt.decode(stream)
            return decodedLedgerHeader
        }
    }
}
